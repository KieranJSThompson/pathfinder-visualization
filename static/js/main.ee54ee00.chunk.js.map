{"version":3,"sources":["components/Node.js","algorithms/astar.js","Spot.js","components/Pathfind.js","App.js","reportWebVitals.js","index.js"],"names":["Node","isStart","isEnd","isWall","row","col","classes","className","id","heuristic","a","b","Math","abs","x","y","Astar","startNode","endNode","openSet","closedSet","path","visitedNodes","push","lowestFScoreIndex","i","length","f","current","temp","previous","filter","elt","neighbours","neighbour","includes","tempG","g","newPath","h","error","Spot","rows","cols","this","random","undefined","addNeighbours","grid","j","Pathfind","useState","Grid","setGrid","Path","setPath","VisitedNodes","setVisitedNodes","useEffect","initialiseGrid","Array","createSpot","gridWithNodes","map","rowIndex","colIndex","onClick","setTimeout","shortestPathNodes","node","document","getElementById","visualizeShortestPath","window","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ee54ee00.chunk.js","sourcesContent":["import React from 'react';\nimport './Node.css';\n\nconst Node = ({isStart, isEnd, isWall, row, col}) => {\n  const classes = isStart ? \"node-start\" : isWall ? 'node-wall' : isEnd ? \"node-end\" : \"\";\n  return (\n    <div className={`node ${classes}`} id={`node-${row}-${col}`}>\n\n    </div>\n  )\n}\n\nexport default Node;","function Astar(startNode, endNode) {\n  let openSet = [];\n  let closedSet = [];\n  let path = [];\n  let visitedNodes = [];\n\n  openSet.push(startNode);\n  while(openSet.length > 0) {\n    let lowestFScoreIndex = 0;\n    for (let i = 0; i < openSet.length; i++) {\n      if (openSet[i].f < openSet[lowestFScoreIndex].f) {\n        lowestFScoreIndex = i;\n      }\n    }\n\n    let current = openSet[lowestFScoreIndex];\n    visitedNodes.push(current);\n    if (current === endNode) {\n      let temp = current;\n      path.push(temp);\n      while(temp.previous) {\n        path.push(temp.previous);\n        temp = temp.previous;\n      }\n\n      return {path, visitedNodes};\n    }\n\n    openSet = openSet.filter(elt => elt !== current);\n    closedSet.push(current);\n\n    let neighbours = current.neighbours;\n    for (let i= 0;i < neighbours.length; i++) {\n      let neighbour = neighbours[i];\n\n      if (!closedSet.includes(neighbour) && !neighbour.isWall) {\n        let tempG = current.g + 1;\n        let newPath = false;\n        if (openSet.includes(neighbour)) {\n          if (tempG < neighbour.g) {\n            neighbour.g = tempG;\n            newPath = true;\n          }\n        } else {\n          neighbour.g = tempG;\n          newPath = true;\n          openSet.push(neighbour);\n        }\n        if (newPath) {\n          neighbour.h = heuristic(neighbour, endNode);\n          neighbour.f = neighbour.g + neighbour.h;\n          neighbour.previous = current;\n        }\n      }\n    }\n  }\n\n   return {path, visitedNodes, error: 'no path found'};\n}\n\nconst heuristic = (a, b) => Math.abs(a.x - a.y) + Math.abs(b.x - b.y);\n\nexport default Astar;","\r\n\r\n  // Spot constructor\r\n  export default function Spot(x, y, isStart, isEnd, rows, cols) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.isStart = isStart;\r\n    this.isEnd = isEnd;\r\n    this.g = 0;\r\n    this.f = 0;\r\n    this.f = 0;\r\n    this.neighbours = [];\r\n    this.isWall = false;\r\n    if (Math.random(1) < 0.2) {\r\n      this.isWall = true;\r\n    }\r\n    this.previous = undefined;\r\n    this.addNeighbours = function(grid) {\r\n      let i = this.x;\r\n      let j = this.y;\r\n      if (i > 0) this.neighbours.push(grid[i-1][j]);\r\n      if (i < rows - 1) this.neighbours.push(grid[i+1][j]);\r\n      if (j > 0) this.neighbours.push(grid[i][j-1]);\r\n      if (j < cols - 1) this.neighbours.push(grid[i][j+1]);\r\n    }\r\n  }","import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport Astar from '../algorithms/astar';\nimport Spot from '../Spot';\nimport \"./Pathfind.css\";\n\nconst cols = 25;\nconst rows = 25;\n\nconst NODE_START_ROW = 0;\nconst NODE_START_COL = 0;\nconst NODE_END_ROW = rows - 1;\nconst NODE_END_COL = cols - 1;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  const [Path, setPath] = useState([]);\n  const [VisitedNodes, setVisitedNodes] = useState([]);\n\n  useEffect(() => {\n    initialiseGrid();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const initialiseGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n\n    createSpot(grid);\n    setGrid(grid);\n    addNeighbours(grid);\n    const startNode = grid[NODE_START_ROW][NODE_START_COL];\n    const endNode = grid[NODE_END_ROW][NODE_END_COL];\n    const {path, visitedNodes} = Astar(startNode, endNode);\n    startNode.isWall = false;\n    endNode.isWall = false;\n    setPath(path);\n    setVisitedNodes(visitedNodes);\n  };\n\n  const createSpot = (grid) => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const isStart = (i === NODE_START_ROW && j === NODE_START_COL);\n        const isEnd = (i === NODE_END_ROW && j === NODE_END_COL);\n        grid[i][j] = new Spot(i, j, isStart, isEnd, rows, cols);\n      }\n    }\n  };\n\n  const addNeighbours = (grid) => {\n    for(let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j].addNeighbours(grid);\n      }\n    }\n  }\n\n\n  const gridWithNodes = (\n    <div>\n      {Grid.map((row, rowIndex) => {\n        return (\n          <div className=\"rowWrapper\" key={rowIndex}>\n            {row.map((col, colIndex) => {\n              const { isStart, isEnd, isWall} = col;\n              return (\n                <Node\n                  key={colIndex}\n                  isStart={isStart}\n                  isEnd={isEnd}\n                  row={rowIndex}\n                  col={colIndex}\n                  isWall={isWall}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  const visualizeShortestPath = (shortestPathNodes) => {\n    for (let i = 0; i < shortestPathNodes.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathNodes[i];\n        document.getElementById(`node-${node.x}-${node.y}`).className = 'node node-shortest-path';\n      }, 10 * i);\n    }\n  }\n\n  const visualizePath = () => {\n    for (let i = 0; i <= VisitedNodes.length; i++) {\n      if (i === VisitedNodes.length) {\n        setTimeout(() => {\n          visualizeShortestPath(Path);\n        }, 2 * i);\n      } else {\n        setTimeout(() => {\n          const node = VisitedNodes[i];\n          document.getElementById(`node-${node.x}-${node.y}`).className = 'node node-visited';\n        }, 2 * i);\n      }\n    }\n  }\n\n  const resetVisualization = () => {\n    window.location.reload();\n\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Pathfind Visualiser</h1>\n      <button onClick={visualizePath}>visualise pathfinder</button>\n      <button onClick={resetVisualization}>reset</button>\n      {gridWithNodes}\n    </div>\n  );\n};\n\nexport default Pathfind;\n","import Pathfind from './components/Pathfind';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Pathfind />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}